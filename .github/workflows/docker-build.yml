name: Docker Build and Push

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Multi-Container Build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create .env file
        run: |
          cp .env.example .env

      - name: Patch docker-compose.yml for CI
        run: |
          # Check if traefik network is set as external (ignore commented lines)
          if grep -E "^\s*external:\s*true" docker-compose.yml > /dev/null; then
            echo "Found external traefik network, patching for CI..."
            # Create backup
            cp docker-compose.yml docker-compose.yml.ci-backup
            # Remove external: true from traefik network to let Docker manage it
            sed -i '/traefik:/,/external: true/{ /external: true/d; }' docker-compose.yml
            echo "Patched docker-compose.yml to use Docker-managed traefik network"
          else
            echo "No external traefik network found, proceeding without patch"
          fi

      - name: Build services
        run: |
          docker compose build viavi-db
          docker compose build viavi-web

      - name: Test multi-container deployment
        run: |
          docker compose up -d
          sleep 30
          docker compose ps
          docker compose logs viavi-web
          curl -f http://localhost:8080/ || (docker compose logs && exit 1)
          docker compose down

  build-and-push-db:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for database service
        id: meta-db
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-db
          tags: |          
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push database service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.db
          push: true
          tags: ${{ steps.meta-db.outputs.tags }}
          labels: ${{ steps.meta-db.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-web:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for web service
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |          
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push web service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


